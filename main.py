import logging

import aiogram.types
import numpy
import database as db
import datetime
import flask
from flask import Flask, request, Response
from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, ReplyKeyboardRemove, KeyboardButton

app = Flask(__name__)


@app.route('/')
def index():
    return '<h1>Hello World!</h1>'


API_TOKEN = '5835225357:AAGQApnDDPAc273vB-l_gNcL4u2J45SRMSk'
HELP_TEXT = '/start - –±–æ—Ç–Ω–∏ –∏—à–≥–∞ —Ç—É—à–∏—Ä–∏—à\n/about - —É—à–±—É —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç —Ö–∞“õ–∏–¥–∞\n/help - —Ñ–æ–π–¥–∞–ª–∏ –±—É–π—Ä—É“õ–ª–∞—Ä\n' \
            '/cancel - –∂–∞—Ä–∞—ë–Ω–Ω–∏ –±–µ–∫–æ—Ä “õ–∏–ª–∏—à\n----------------------\n<b><i>–£—à–±—É –±—É–π—Ä—É“õ–ª–∞—Ä–¥–∞–Ω –±–∏—Ä–∏–Ω–∏ –∏—à–ª–∞—Ç–≥–∞–Ω–∏–Ω–≥–∏–∑–¥–∞–Ω ' \
            '—Å—û–Ω–≥, –±–∞—Ä—á–∞ –∫–∏—Ä–∏—Ç–≥–∞–Ω –º–∞—ä–ª—É–º–æ—Ç–ª–∞—Ä–∏–Ω–≥–∏–∑ —û—á–∏–± –∫–µ—Ç–∏—à–∏–Ω–∏ –∏–Ω–æ–±–∞—Ç–≥–∞ –æ–ª–∏—à–∏–Ω–≥–∏–∑–Ω–∏ —Å—û—Ä–∞–π–º–∏–∑!</i></b>'
english_alphabet = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T',
                    'U', 'V', 'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',
                    'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '–ê', '–ë', '–í', '–ì', '–î', '–ï', '–Å', '–ñ',
                    '–ó', '–ò', '–ô', '–ö', '–õ', '–ú', '–ù', '–û', '–ü', '–†', '–°', '–¢', '–£', '–§', '–•', '–¶', '–ß', '–®', '–©', '–™',
                    '–´', '–¨', '–≠', '–Æ', '–Ø', '–∞', '–±', '–≤', '–≥', '–¥', '–µ', '—ë', '–∂', '–∑', '–∏', '–π', '–∫', '–ª', '–º', '–Ω',
                    '–æ', '–ø', '—Ä', '—Å', '—Ç', '—É', '—Ñ', '—Ö', '—Ü', '—á', '—à', '—â', '—ä', '—ã', '—å', '—ç', '—é', '—è', '–é', '“ö',
                    '“í', '“≤', '—û', '“õ', '“ì', '“≥', ' ']
logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

user_contact_markup = ReplyKeyboardMarkup(resize_keyboard=True).add(KeyboardButton('‚òéÔ∏è –¢–µ–ª–µ—Ñ–æ–Ω —Ä–∞“õ–∞–º–∏–º–Ω–∏ —é–±–æ—Ä–∏—à',
                                                                                   request_contact=True))
request_add_markup = ReplyKeyboardMarkup(resize_keyboard=True).add(KeyboardButton('üôÖ‚Äç‚ôÇÔ∏è “ö—û—à–∏–º—á–∞ –∏–ª–æ–≤–∞–ª–∞—Ä–∏–º –π—û“õ'))
request1 = KeyboardButton('üìù –¢–∞–∫–ª–∏—Ñ')
request2 = KeyboardButton('‚ÄºÔ∏è –®–∏–∫–æ—è—Ç')
request3 = KeyboardButton('üíº –ê—Ä–∏–∑–∞')
request4 = KeyboardButton('–ë–æ—à“õ–∞')
request_type_markup = ReplyKeyboardMarkup(resize_keyboard=True).add(request1, request2, request3, request4)
message_types = ['audio', 'document', 'photo', 'video', 'video_note', 'voice', 'contact', 'location']
moderator_chat_id = 6090824712


class User(StatesGroup):
    user_id = State()
    user_name = State()
    user_contact = State()
    request_type = State()
    request_content = State()
    request_add = State()
    request_add_type = State()
    request_number = State()
    request_datetime = State()


async def on_startup(_):
    await db.db_start()
    print("Successfully launched!")


@dp.message_handler(commands=['start'])
async def command_start(message: types.Message, state: FSMContext):
    await state.finish()
    await User.user_name.set()
    await message.answer('–ê—Å—Å–∞–ª–æ–º—É –∞–ª–∞–π–∫—É–º!üòä\n–ò—Å–º, –§–∞–º–∏–ª–∏—è –≤–∞ –®–∞—Ä–∏—Ñ–∏–Ω–≥–∏–∑–Ω–∏ —Ç—û–ª–∏“õ —Ñ–æ—Ä–º–∞—Ç–¥–∞ –∫–∏—Ä–∏—Ç–∏–Ω–≥:', parse_mode='html',
                         reply_markup=ReplyKeyboardRemove())


@dp.message_handler(state='*', commands=['help'])
async def command_help(message: types.Message, state: FSMContext):
    await state.finish()
    current_state = await state.get_state()
    if current_state is None:
        return await message.answer(HELP_TEXT, parse_mode='html', reply_markup=ReplyKeyboardRemove())
    await message.answer(HELP_TEXT, parse_mode='html', reply_markup=ReplyKeyboardRemove())


@dp.message_handler(state='*', commands=['about'])
async def command_about(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return await message.answer('–é–∑–±–µ–∫–∏—Å—Ç–æ–Ω –†–µ—Å–ø—É–±–ª–∏–∫–∞—Å–∏ –¢–∞–±–∏–∞—Ç —Ä–µ—Å—É—Ä—Å–ª–∞—Ä–∏ –≤–∞–∑–∏—Ä–ª–∏–≥–∏ “õ–æ—à–∏–¥–∞–≥–∏ –é–∑–±–µ–∫–∏—Å—Ç–æ–Ω '
                                    '–†–µ—Å–ø—É–±–ª–∏–∫–∞—Å–∏ –≥–∏–¥—Ä–æ–º–µ—Ç–µ–æ—Ä–æ–ª–æ–≥–∏—è —Ö–∏–∑–º–∞—Ç–∏ –∞–≥–µ–Ω—Ç–ª–∏–≥–∏–Ω–∏–Ω–≥ –∂–∏—Å–º–æ–Ω–∏–π –≤–∞ —é—Ä–∏–¥–∏–∫ '
                                    '—à–∞—Ö—Å–ª–∞—Ä–Ω–∏–Ω–≥ –º—É—Ä–æ–∂–∞–∞—Ç–ª–∞—Ä–∏–Ω–∏ “õ–∞–±—É–ª “õ–∏–ª–∏—à–≥–∞ –º—û–ª–∂–∞–ª–ª–∞–Ω–≥–∞–Ω —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç.',
                                    reply_markup=ReplyKeyboardRemove())
    await message.answer('bla bla bla', reply_markup=ReplyKeyboardRemove())


@dp.message_handler(state='*', commands=['cancel'])
@dp.message_handler(Text(equals='cancel', ignore_case=True), state='*')
async def cancel_handler(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return await message.answer('‚õî –ñ–∞—Ä–∞—ë–Ω –±–µ–∫–æ—Ä “õ–∏–ª–∏–Ω–≥–∞–Ω!')
    logging.info('Cancelling the process %r', current_state)
    await state.finish()
    await message.answer('‚õî –ñ–∞—Ä–∞—ë–Ω –±–µ–∫–æ—Ä “õ–∏–ª–∏–Ω–¥–∏!', reply_markup=ReplyKeyboardRemove())


@dp.message_handler(state=[None, User.user_name, User.request_type, User.request_content],
                    content_types=[types.ContentType.AUDIO, types.ContentType.ANIMATION, types.ContentType.DOCUMENT,
                                   types.ContentType.GAME, types.ContentType.PHOTO, types.ContentType.STICKER,
                                   types.ContentType.VIDEO, types.ContentType.VIDEO_NOTE, types.ContentType.VOICE,
                                   types.ContentType.CONTACT, types.ContentType.VENUE, types.ContentType.LOCATION,
                                   types.ContentType.POLL, types.ContentType.DICE, types.ContentType.NEW_CHAT_MEMBERS,
                                   types.ContentType.LEFT_CHAT_MEMBER, types.ContentType.INVOICE,
                                   types.ContentType.SUCCESSFUL_PAYMENT, types.ContentType.CONNECTED_WEBSITE,
                                   types.ContentType.MESSAGE_AUTO_DELETE_TIMER_CHANGED,
                                   types.ContentType.MIGRATE_FROM_CHAT_ID, types.ContentType.MIGRATE_TO_CHAT_ID,
                                   types.ContentType.PINNED_MESSAGE, types.ContentType.NEW_CHAT_TITLE,
                                   types.ContentType.NEW_CHAT_PHOTO, types.ContentType.DELETE_CHAT_PHOTO,
                                   types.ContentType.GROUP_CHAT_CREATED, types.ContentType.PASSPORT_DATA,
                                   types.ContentType.PROXIMITY_ALERT_TRIGGERED, types.ContentType.VOICE_CHAT_SCHEDULED,
                                   types.ContentType.VOICE_CHAT_STARTED, types.ContentType.VOICE_CHAT_ENDED,
                                   types.ContentType.VOICE_CHAT_PARTICIPANTS_INVITED, types.ContentType.WEB_APP_DATA,
                                   types.ContentType.FORUM_TOPIC_CREATED, types.ContentType.FORUM_TOPIC_CLOSED,
                                   types.ContentType.FORUM_TOPIC_REOPENED, types.ContentType.VIDEO_CHAT_SCHEDULED,
                                   types.ContentType.VIDEO_CHAT_STARTED, types.ContentType.VIDEO_CHAT_ENDED,
                                   types.ContentType.VIDEO_CHAT_PARTICIPANTS_INVITED,
                                   types.ContentType.FORUM_TOPIC_EDITED, types.ContentType.GENERAL_FORUM_TOPIC_HIDDEN,
                                   types.ContentType.GENERAL_FORUM_TOPIC_UNHIDDEN,
                                   types.ContentType.WRITE_ACCESS_ALLOWED])
async def incorrect_text(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return await message.answer('üö´ –ù–æ—Ç—û“ì—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–¥–∞–≥–∏ –±–µ–ª–≥–∏ –∫–∏—Ä–∏—Ç–∏–ª–∏. –ò–ª—Ç–∏–º–æ—Å –±–æ—Ç–Ω–∏ /start –±—É–π—Ä—É“ì–∏ —ë—Ä–¥–∞–º–∏–¥–∞ '
                                    '“õ–∞–π—Ç–∞–¥–∞–Ω –∏—à–≥–∞ —Ç—É—à–∏—Ä–∏–Ω–≥')
    elif current_state == 'User:user_name':
        return await process_user_name_invalid(message)
    elif current_state == 'User:request_type':
        return await process_request_type_invalid(message)
    elif current_state == 'User:request_content':
        return await process_request_content_invalid(message)
    else:
        return await message.answer('‚ÄºÔ∏è–¢–∏–∑–∏–º –Ω–æ—Å–æ–∑–ª–∏–≥–∏! “ö–∞–π—Ç–∞–¥–∞–Ω —É—Ä–∏–Ω–∏–± –∫—û—Ä–∏–Ω–≥! /start')


@dp.message_handler(state=User.user_contact,
                    content_types=[types.ContentType.AUDIO, types.ContentType.ANIMATION, types.ContentType.DOCUMENT,
                                   types.ContentType.GAME, types.ContentType.PHOTO, types.ContentType.STICKER,
                                   types.ContentType.VIDEO, types.ContentType.VIDEO_NOTE, types.ContentType.VOICE,
                                   types.ContentType.VENUE, types.ContentType.LOCATION, types.ContentType.POLL,
                                   types.ContentType.DICE, types.ContentType.NEW_CHAT_MEMBERS,
                                   types.ContentType.LEFT_CHAT_MEMBER, types.ContentType.INVOICE,
                                   types.ContentType.SUCCESSFUL_PAYMENT, types.ContentType.CONNECTED_WEBSITE,
                                   types.ContentType.MESSAGE_AUTO_DELETE_TIMER_CHANGED,
                                   types.ContentType.MIGRATE_FROM_CHAT_ID, types.ContentType.MIGRATE_TO_CHAT_ID,
                                   types.ContentType.PINNED_MESSAGE, types.ContentType.NEW_CHAT_TITLE,
                                   types.ContentType.NEW_CHAT_PHOTO, types.ContentType.DELETE_CHAT_PHOTO,
                                   types.ContentType.GROUP_CHAT_CREATED, types.ContentType.PASSPORT_DATA,
                                   types.ContentType.PROXIMITY_ALERT_TRIGGERED, types.ContentType.VOICE_CHAT_SCHEDULED,
                                   types.ContentType.VOICE_CHAT_STARTED, types.ContentType.VOICE_CHAT_ENDED,
                                   types.ContentType.VOICE_CHAT_PARTICIPANTS_INVITED, types.ContentType.WEB_APP_DATA,
                                   types.ContentType.FORUM_TOPIC_CREATED, types.ContentType.FORUM_TOPIC_CLOSED,
                                   types.ContentType.FORUM_TOPIC_REOPENED, types.ContentType.VIDEO_CHAT_SCHEDULED,
                                   types.ContentType.VIDEO_CHAT_STARTED, types.ContentType.VIDEO_CHAT_ENDED,
                                   types.ContentType.VIDEO_CHAT_PARTICIPANTS_INVITED,
                                   types.ContentType.FORUM_TOPIC_EDITED, types.ContentType.GENERAL_FORUM_TOPIC_HIDDEN,
                                   types.ContentType.GENERAL_FORUM_TOPIC_UNHIDDEN,
                                   types.ContentType.WRITE_ACCESS_ALLOWED])
async def incorrect_user_contact(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state == 'User:user_contact':
        return await process_user_contact_text_invalid(message)
    else:
        return await message.answer('‚ÄºÔ∏è–¢–∏–∑–∏–º –Ω–æ—Å–æ–∑–ª–∏–≥–∏! “ö–∞–π—Ç–∞–¥–∞–Ω —É—Ä–∏–Ω–∏–± –∫—û—Ä–∏–Ω–≥! /start')


@dp.message_handler(state=User.request_add,
                    content_types=[types.ContentType.ANIMATION, types.ContentType.GAME, types.ContentType.STICKER,
                                   types.ContentType.POLL, types.ContentType.DICE, types.ContentType.NEW_CHAT_MEMBERS,
                                   types.ContentType.LEFT_CHAT_MEMBER, types.ContentType.INVOICE,
                                   types.ContentType.SUCCESSFUL_PAYMENT, types.ContentType.CONNECTED_WEBSITE,
                                   types.ContentType.MESSAGE_AUTO_DELETE_TIMER_CHANGED,
                                   types.ContentType.MIGRATE_FROM_CHAT_ID, types.ContentType.MIGRATE_TO_CHAT_ID,
                                   types.ContentType.PINNED_MESSAGE, types.ContentType.NEW_CHAT_TITLE,
                                   types.ContentType.NEW_CHAT_PHOTO, types.ContentType.DELETE_CHAT_PHOTO,
                                   types.ContentType.GROUP_CHAT_CREATED, types.ContentType.PASSPORT_DATA,
                                   types.ContentType.PROXIMITY_ALERT_TRIGGERED, types.ContentType.VOICE_CHAT_SCHEDULED,
                                   types.ContentType.VOICE_CHAT_STARTED, types.ContentType.VOICE_CHAT_ENDED,
                                   types.ContentType.VOICE_CHAT_PARTICIPANTS_INVITED, types.ContentType.WEB_APP_DATA,
                                   types.ContentType.FORUM_TOPIC_CREATED, types.ContentType.FORUM_TOPIC_CLOSED,
                                   types.ContentType.FORUM_TOPIC_REOPENED, types.ContentType.VIDEO_CHAT_SCHEDULED,
                                   types.ContentType.VIDEO_CHAT_STARTED, types.ContentType.VIDEO_CHAT_ENDED,
                                   types.ContentType.VIDEO_CHAT_PARTICIPANTS_INVITED,
                                   types.ContentType.FORUM_TOPIC_EDITED, types.ContentType.GENERAL_FORUM_TOPIC_HIDDEN,
                                   types.ContentType.GENERAL_FORUM_TOPIC_UNHIDDEN,
                                   types.ContentType.WRITE_ACCESS_ALLOWED])
async def incorrect_request_add(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state == 'User:request_add':
        return await process_request_add_invalid(message)
    else:
        return await message.answer('‚ÄºÔ∏è–¢–∏–∑–∏–º –Ω–æ—Å–æ–∑–ª–∏–≥–∏! “ö–∞–π—Ç–∞–¥–∞–Ω —É—Ä–∏–Ω–∏–± –∫—û—Ä–∏–Ω–≥! /start')


@dp.message_handler(lambda message: False in list(numpy.isin(list(message.text), english_alphabet)),
                    state=User.user_name)
async def process_user_name_invalid(message: types.Message):
    return await message.answer('üö´ –ò—Å–º, —Ñ–∞–º–∏–ª–∏—è —ë–∫–∏ —à–∞—Ä–∏—Ñ–∏–Ω–≥–∏–∑ –Ω–æ—Ç—û“ì—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–¥–∞ –∫–∏—Ä–∏—Ç–∏–ª–¥–∏. –ò–ª—Ç–∏–º–æ—Å “õ–∞–π—Ç–∞–¥–∞–Ω –∫–∏—Ä–∏—Ç–∏–Ω–≥:',
                                reply_markup=ReplyKeyboardRemove())


@dp.message_handler(state=User.user_name, content_types=types.ContentType.TEXT)
async def process_user_name(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['user_name'] = message.text
    await User.next()
    await message.answer('–ò–ª—Ç–∏–º–æ—Å, —Å–∏–∑ –±–∏–ª–∞–Ω –±–æ“ì–ª–∞–Ω–∏—à —É—á—É–Ω –¢–µ–ª–µ—Ñ–æ–Ω —Ä–∞“õ–∞–º–∏–Ω–≥–∏–∑–Ω–∏ –∫–∏—Ä–∏—Ç–∏–Ω–≥, —ë–∫–∏ “õ—É–π–∏–¥–∞–≥–∏ —Ç—É–≥–º–∞–Ω–∏ –±–æ—Å–∏–Ω–≥:',
                         reply_markup=user_contact_markup)


@dp.message_handler(lambda message: not (message.text[0:4] == '+998' and len(message.text) == 13
                                         and message.text[1:13].isdigit()), state=User.user_contact)
async def process_user_contact_text_invalid(message: types.Message):
    return await message.answer('üö´ –ò–ª—Ç–∏–º–æ—Å —Ç–µ–ª–µ—Ñ–æ–Ω —Ä–∞“õ–∞–º–∏–Ω–≥–∏–∑–Ω–∏ —Ç—û“ì—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–¥–∞ –∫–∏—Ä–∏—Ç–∏–Ω–≥, —ë–∫–∏ “õ—É–π–∏–¥–∞–≥–∏ —Ç—É–≥–º–∞–Ω–∏ –±–æ—Å–∏–Ω–≥!',
                                reply_markup=user_contact_markup)


@dp.message_handler(state=User.user_contact, content_types=types.ContentType.TEXT)
async def process_user_contact_text(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['user_contact'] = message.text
    await User.next()
    await message.answer('–ò–ª—Ç–∏–º–æ—Å –º—É—Ä–æ–∂–∞–∞—Ç —Ç—É—Ä–∏–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥:', reply_markup=request_type_markup)


@dp.message_handler(lambda message: not (message.contact.phone_number[0:4] == '+998'
                                         and len(message.contact.phone_number) == 13
                                         and message.contact.phone_number[1:13].isdigit()), state=User.user_contact)
async def process_user_contact_object_invalid(message: types.Message):
    return await message.answer('üö´ –ò–ª—Ç–∏–º–æ—Å —Ç–µ–ª–µ—Ñ–æ–Ω —Ä–∞“õ–∞–º–∏–Ω–≥–∏–∑–Ω–∏ —Ç—û“ì—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–¥–∞ –∫–∏—Ä–∏—Ç–∏–Ω–≥, —ë–∫–∏ “õ—É–π–∏–¥–∞–≥–∏ —Ç—É–≥–º–∞–Ω–∏ –±–æ—Å–∏–Ω–≥!',
                                reply_markup=user_contact_markup)


@dp.message_handler(state=User.user_contact, content_types=types.ContentType.CONTACT)
async def process_user_contact_object(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['user_contact'] = message.contact.phone_number
    await User.next()
    await message.answer('–ò–ª—Ç–∏–º–æ—Å –º—É—Ä–æ–∂–∞–∞—Ç —Ç—É—Ä–∏–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥:', reply_markup=request_type_markup)


@dp.message_handler(lambda message: message.text not in ['üìù –¢–∞–∫–ª–∏—Ñ', '‚ÄºÔ∏è –®–∏–∫–æ—è—Ç', 'üíº –ê—Ä–∏–∑–∞', '–ë–æ—à“õ–∞'],
                    state=User.request_type)
async def process_request_type_invalid(message: types.Message):
    return await message.answer('üö´ –ò–ª—Ç–∏–º–æ—Å —Ñ–∞“õ–∞—Ç–≥–∏–Ω–∞ “õ—É–π–∏–¥–∞–≥–∏ –∫–µ–ª—Ç–∏—Ä–∏–ª–≥–∞–Ω —Ç—É–≥–º–∞–ª–∞—Ä–¥–∞–Ω –±–∏—Ä–∏–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥!',
                                reply_markup=request_type_markup)


@dp.message_handler(state=User.request_type, content_types=types.ContentType.TEXT)
async def process_request_type(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['request_type'] = message.text
    await User.next()
    await message.answer('–ò–ª—Ç–∏–º–æ—Å –º—É—Ä–æ–∂–∞–∞—Ç–∏–Ω–≥–∏–∑–Ω–∏ –º–∞—Ç–Ω –∫—û—Ä–∏–Ω–∏—à–∏–¥–∞ –∫–∏—Ä–∏—Ç–∏–Ω–≥:', reply_markup=ReplyKeyboardRemove())


@dp.message_handler(lambda message: message.text == '#$@**#@&$@)$(%*&^@#^%$@^&%$*@', state=User.request_content)
async def process_request_content_invalid(message: types.Message):
    return await message.answer('üö´ –ù–æ—Ç—û“ì—Ä–∏ –±–µ–ª–≥–∏ –∫–∏—Ä–∏—Ç–∏–ª–¥–∏. –ú—É—Ä–æ–∂–∞–∞—Ç —Ñ–∞“õ–∞—Ç–≥–∏–Ω–∞ –º–∞—Ç–Ω –∫—û—Ä–∏–Ω–∏—à–∏–¥–∞ –∫–∏—Ä–∏—Ç–∏–ª–∏—à–∏ –∫–µ—Ä–∞–∫.',
                                reply_markup=ReplyKeyboardRemove())


@dp.message_handler(state=User.request_content, content_types=types.ContentType.ANY)
async def process_request_content(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['request_content'] = message.text
    await User.next()
    await message.answer('–ê–≥–∞—Ä–¥–∞ “õ—û—à–∏–º—á–∞ —Ñ–∞–π–ª —ë–∫–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–ª–∞—Ä–∏–Ω–≥–∏–∑ –±—û–ª—Å–∞ –∫–∏—Ä–∏—Ç–∏–Ω–≥, —ë–∫–∏ “õ—É–π–∏–¥–∞–≥–∏ —Ç—É–≥–º–∞–Ω–∏ –±–æ—Å–∏–Ω–≥, '
                         '–≤–∞ –º—É—Ä–æ–∂–∞–∞—Ç–∏–Ω–≥–∑–∏–Ω–∏ —è–∫—É–Ω–ª–∞–Ω–≥.', reply_markup=request_add_markup)


@dp.message_handler(lambda message: message.text != 'üôÖ‚Äç‚ôÇÔ∏è “ö—û—à–∏–º—á–∞ –∏–ª–æ–≤–∞–ª–∞—Ä–∏–º –π—û“õ', state=User.request_add)
async def process_request_add_invalid(message: types.Message):
    return await message.answer('‚ÄºÔ∏è–°–∏–∑ –∫–∏—Ä–∏—Ç–≥–∞–Ω –º–∞—ä–ª—É–º–æ—Ç —Ñ–æ—Ä–º–∞—Ç–∏ “õ–∞–±—É–ª “õ–∏–ª–∏–Ω–º–∞–π–¥–∏.\n–§–∞“õ–∞—Ç–≥–∏–Ω–∞ —Ñ–∞–π–ª, —Ä–∞—Å–º, –∞—É–¥–∏–æ –≤–∞ '
                                '—à—É–Ω–≥–∞ —û—Ö—à–∞—à “õ—û—à–∏–º—á–∞ –º–∞—ä–ª—É–º–æ—Ç–ª–∞—Ä–Ω–∏ —é–∫–ª–∞—à–∏–Ω–≥–∏–∑ –º—É–º–∫–∏–Ω.')


@dp.message_handler(state=User.request_add, content_types=types.ContentType.ANY)
async def process_request_add(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['user_id'] = message.from_user.id
        data['request_number'] = None
        if message.text == 'üôÖ‚Äç‚ôÇÔ∏è “ö—û—à–∏–º—á–∞ –∏–ª–æ–≤–∞–ª–∞—Ä–∏–º –π—û“õ':
            data['request_add_type'] = None
            data['request_add'] = None
        elif message.content_type in message_types:
            data['request_add_type'] = message.content_type
            if message.content_type == 'audio':
                data['request_add'] = message.audio.file_id
            elif message.content_type == 'document':
                data['request_add'] = message.document.file_id
            elif message.content_type == 'photo':
                data['request_add'] = message.photo[-1].file_id
            elif message.content_type == 'video':
                data['request_add'] = message.video.file_id
            elif message.content_type == 'video_note':
                data['request_add'] = message.video_note.file_id
            elif message.content_type == 'voice':
                data['request_add'] = message.voice.file_id
            elif message.content_type == 'contact':
                contact_information = [str(message.contact.phone_number), str(message.contact.first_name),
                                       str(message.contact.last_name), str(message.contact.vcard),
                                       str(message.contact.user_id)]
                contact_information_string = ','.join(contact_information)
                data['request_add'] = contact_information_string
            elif message.content_type == 'location':
                location_information = [str(message.location.latitude), str(message.location.longitude)]
                location_information_string = ','.join(location_information)
                data['request_add'] = location_information_string
        else:
            await message.answer('‚ÄºÔ∏è–¢–∏–∑–∏–º –Ω–æ—Å–æ–∑–ª–∏–≥–∏! “ö–∞–π—Ç–∞–¥–∞–Ω —É—Ä–∏–Ω–∏–± –∫—û—Ä–∏–Ω–≥! /start')
        data['request_datetime'] = datetime.datetime.now().strftime("%H:%M:%S,%d-%m-%Y")
    await db.add_application(state)
    async with state.proxy() as data:
        number = await db.get_request_id(state)
        if number:
            data['request_number'] = 100000 + number
        else:
            await message.answer('‚ÄºÔ∏è–¢–∏–∑–∏–º –Ω–æ—Å–æ–∑–ª–∏–≥–∏! “ö–∞–π—Ç–∞–¥–∞–Ω —É—Ä–∏–Ω–∏–± –∫—û—Ä–∏–Ω–≥! /start')
            await state.finish()
    async with state.proxy():
        await db.set_request_number(state)
    async with state.proxy():
        result = await db.get_all_results(state)
        await bot.send_message(message.chat.id, f'‚úÖ –ú—É—Ä–æ–∂–∞–∞—Ç–∏–Ω–≥–∏–∑ “õ–∞–±—É–ª “õ–∏–ª–∏–Ω–¥–∏!\n–°–∏–∑–Ω–∏–Ω–≥ –º—É—Ä–æ–∂–∞–∞—Ç —Ä–∞“õ–∞–º–∏–Ω–≥–∏–∑: '
                                                f'<b><i>{result[5]}</i></b>\nüôç –ú—É—Ç–∞—Ö–∞—Å—Å–∏—Å–ª–∞—Ä–∏–º–∏–∑ —Å–∏–∑ –±–∏–ª–∞–Ω —Ç–µ–∑ –æ—Ä–∞–¥–∞ '
                                                f'–±–æ“ì–ª–∞–Ω–∏—à–∞–¥–∏!', reply_markup=ReplyKeyboardRemove(), parse_mode='html')
        await bot.send_message(moderator_chat_id, f'{result[4]}\nüîñ <b><i>–ú—É—Ä–æ–∂–∞–∞—Ç —Ä–∞“õ–∞–º–∏:</i> {result[5]}</b>\n'
                                                  f'üôé <b><i>–§–ò–®:</i> {result[2]}</b>\n‚òéÔ∏è <b><i>–¢–µ–ª–µ—Ñ–æ–Ω —Ç–∞“õ–∞–º–∏:</i> '
                                                  f'{result[3]}</b>\nüìã <b><i>–ú—É—Ä–æ–∂–∞–∞—Ç –º–∞—Ç–Ω–∏:</i></b>\n{result[6]}\n'
                                                  f'üìé <b><i>“ö—û—à–∏–º—á–∞ –º–∞—Ç–µ—Ä–∏–∞–ª:</i></b>',
                               reply_markup=ReplyKeyboardRemove(), parse_mode='html')
        if result[7] is None and result[8] is None:
            await bot.send_message(moderator_chat_id, '“ö—û—à–∏–º—á–∞ –º–∞—Ç–µ—Ä–∏–∞–ª <b><i>–ô–é“ö</i></b>',
                                   reply_markup=ReplyKeyboardRemove(), parse_mode='html')
        elif result[8] == 'audio':
            await bot.send_audio(moderator_chat_id, result[7], reply_markup=ReplyKeyboardRemove())
        elif result[8] == 'document':
            await bot.send_document(moderator_chat_id, result[7], reply_markup=ReplyKeyboardRemove())
        elif result[8] == 'photo':
            await bot.send_photo(moderator_chat_id, result[7], reply_markup=ReplyKeyboardRemove())
        elif result[8] == 'video':
            await bot.send_video(moderator_chat_id, result[7], reply_markup=ReplyKeyboardRemove())
        elif result[8] == 'video_note':
            await bot.send_video_note(moderator_chat_id, result[7], reply_markup=ReplyKeyboardRemove())
        elif result[8] == 'voice':
            await bot.send_voice(moderator_chat_id, result[7], reply_markup=ReplyKeyboardRemove())
        elif result[8] == 'contact':
            contact_separated = result[7].split(",")
            await bot.send_contact(moderator_chat_id, contact_separated[0], contact_separated[1], contact_separated[2],
                                   contact_separated[3], reply_markup=ReplyKeyboardRemove())
        elif result[8] == 'location':
            location_separated = result[7].split(",")
            await bot.send_location(moderator_chat_id, location_separated[0], location_separated[1],
                                    reply_markup=ReplyKeyboardRemove())
        else:
            await message.answer('‚ÄºÔ∏è–¢–∏–∑–∏–º –Ω–æ—Å–æ–∑–ª–∏–≥–∏! “ö–∞–π—Ç–∞–¥–∞–Ω —É—Ä–∏–Ω–∏–± –∫—û—Ä–∏–Ω–≥! /start')
    await state.finish()


# if __name__ == '__main__':
#     executor.start_polling(dp, on_startup=on_startup, skip_updates=True)
if __name__ == '__main__':
    app.run()
